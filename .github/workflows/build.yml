name: Build

on:
  push:
  pull_request:
    branches: [ master ]

env:
  tool-id: nionui-tool
  tool-package: nionui
  tool-exe: nionui

jobs:
   build_win:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-2019]
        python-version: ["3.9", "3.10", "3.11", "3.12"]
        qt-version: ["6.7.2"]
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Display Python version
      shell: pwsh
      run: |
        python -c "import sys; print(sys.version)"
        python -c "import sys; print(sys.executable)"
    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ matrix.qt-version }}
        host: 'windows'
        target: 'desktop'
        arch: 'win64_msvc2019_64'
    - name: Build
      shell: pwsh
      run: |
        python -m pip install --upgrade pip
        pip install packaging
        pip install "numpy>=1.26,<1.27"
        pushd launcher
        $PYTHON_EXEC = python -c "import sys; print(sys.executable, end='')"
        cmake CMakeLists.txt -DPython3_EXECUTABLE="$PYTHON_EXEC"
        cmake --build . --config Release
        Get-ChildItem -Include *.pdb -Recurse | foreach { $_.Delete() }
        Get-ChildItem build\Release\imageformats -Include *d.dll -Recurse | foreach { $_.Delete() }
        Remove-Item -Recurse -Force x64\*
        Move-Item -Path build\Release -Destination x64
        popd
        python setup.py bdist_wheel
    - name: Set up Miniconda ${{ matrix.python-version }}
      uses: conda-incubator/setup-miniconda@v3
      with:
        auto-update-conda: true
        python-version: "3.11"
        miniconda-version: "latest"
    - name: Build Conda Package
      shell: bash -l {0}
      run: |
        python -c "import sys; print(sys.version)"
        python -c "import sys; print(sys.executable)"
        conda install -q conda-build -y
        conda build -q --python ${{ matrix.python-version }} ./.github/workflows/recipe
        OUT_FILE=$(conda build --python ${{ matrix.python-version }} --output ./.github/workflows/recipe)
        mv $OUT_FILE dist
    - name: Upload Wheel
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.tool-id }}-win-whl-${{ matrix.python-version }}
        path: dist/*.whl
    - name: Upload Conda Package
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.tool-id }}-win-conda-${{ matrix.python-version }}
        path: dist/*.tar.bz2
   test_win:
    needs: build_win
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-2019]
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    steps:
    - uses: actions/checkout@v4
    - name: Download Wheel
      uses: actions/download-artifact@v4
      id: download_wheel
      with:
        name: ${{ env.tool-id }}-win-whl-${{ matrix.python-version }}
        path: downloads
    - name: Download Conda
      uses: actions/download-artifact@v4
      id: download_conda
      with:
        name: ${{ env.tool-id }}-win-conda-${{ matrix.python-version }}
        path: conda_downloads
    - name: Set up Python ${{ matrix.python-version }} with official build
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Test system Python installed with official build with virtual environment
      shell: pwsh
      run: |
        python -m pip install --upgrade pip
        python -m venv test_venv
        test_venv\Scripts\activate
        python -m pip install --upgrade pip
        python -m pip install setuptools
        python -m pip install ${{ env.tool-package }}
        $filename = Get-ChildItem -name ${{steps.download_wheel.outputs.download-path}}\*.whl
        python -m pip install ${{steps.download_wheel.outputs.download-path}}\$filename
        python --version
        python -m pip install numpy scipy h5py
        pushd nionui_app_test
        python -m pip install .
        popd
        echo "Running test..."
        ${{ env.tool-exe }} nionui_app.test_ack
        ${{ env.tool-exe }} nionui_app.test_ack | grep ACK
        deactivate
    - name: Set up Miniconda ${{ matrix.python-version }}
      uses: conda-incubator/setup-miniconda@v3
      with:
        auto-update-conda: true
        activate-environment: test-environment
        miniconda-version: "latest"
        python-version: ${{ matrix.python-version }}
        auto-activate-base: false
    - name: Test Conda
      shell: pwsh
      run: |
        # use conda versions instead of pypi versions. install before anything else.
        conda update -q --all -y
        conda install -q numpy scipy h5py imageio setuptools -y
        conda install -q -y -c nion ${{ env.tool-package }}
        $filename = Get-ChildItem -name ${{steps.download_conda.outputs.download-path}}\*.tar.bz2
        conda install -q -y ${{steps.download_conda.outputs.download-path}}\$filename
        pushd nionui_app_test
        python -m pip install .
        popd
        echo "Running test..."
        conda list
        ${{ env.tool-exe }} nionui_app.test_ack
        ${{ env.tool-exe }} nionui_app.test_ack | grep ACK
    - name: Test Conda Forge
      shell: pwsh
      run: |
        # use conda versions instead of pypi versions. install before anything else.
        conda create -n test-env -c conda-forge -q python=${{ matrix.python-version }} numpy scipy h5py imageio setuptools -y
        conda activate test-env
        conda install -q -y -c nion -c conda-forge ${{ env.tool-package }}
        $filename = Get-ChildItem -name ${{steps.download_conda.outputs.download-path}}\*.tar.bz2
        conda install -q -y -c conda-forge ${{steps.download_conda.outputs.download-path}}\$filename
        pushd nionui_app_test
        python -m pip install .
        popd
        echo "Running test..."
        conda list
        ${{ env.tool-exe }} nionui_app.test_ack
        ${{ env.tool-exe }} nionui_app.test_ack | grep ACK
        conda deactivate
    - name: Build/publish anaconda package
      if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags') && matrix.os == 'windows-2019'
      shell: bash -l {0}
      run: |
        # make a directory to avoid name conflicts with the channel. argh.
        mkdir conda_build
        pushd conda_build
        conda create -n upload-env -q conda-build anaconda-client -y
        conda activate upload-env
        FILENAME=$(find '${{steps.download_conda.outputs.download-path}}' -name "*.tar.bz2")
        echo "Send to Anaconda '$FILENAME'"
        anaconda --token ${{ secrets.anaconda_token }} upload --user nion --skip-existing $FILENAME
        conda deactivate
        popd
 